"""
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º
"""

import asyncio

from random import choice
from ai.request_to_ai import request_to_ai
from bot.bot import dp
from aiogram.types import (
    Message,
    ReplyKeyboardRemove
)
from aiogram.dispatcher import FSMContext
from status_machine.partner_compatibility import InfoPartner
from keyboards.user.reply_buttons.start_buttons import start_commands_buttons


def verification_of_date_of_birth(user_data_of_birth):
    if user_data_of_birth:
        num_fate_partner = sum([int(num) for num in user_data_of_birth.replace(".", "")])

        while num_fate_partner > 9:
            num_fate_partner = sum([int(num) for num in str(num_fate_partner)])

        return num_fate_partner


@dp.message_handler(text="üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–º üí™")
async def partner_compatibility(msg: Message):
    await msg.answer(
        text=(
            "‚ú® <b>–û—Ç–∫—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞—à–∏–º üí™ –¥—Ä—É–≥–æ–º / –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º</b> üíï\n\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <b>17.08.2007</b>\n\n"
            "<i>–ü—É—Å—Ç—å —Å—É–¥—å–±–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞!</i> üîÆ"
        ),
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )

    await msg.answer(
        text="–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –í–∞—Å!\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? ‚ò∫"
    )

    await InfoPartner.partner_one_name.set()


@dp.message_handler(state=InfoPartner.partner_one_name)
async def input_partner_one_name(msg: Message, state: FSMContext):

    async with state.proxy() as data:
        data["partner_one_name"] = msg.text

    await msg.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞ / –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòâ"
    )

    await InfoPartner.partner_two_name.set()


@dp.message_handler(state=InfoPartner.partner_two_name)
async def input_partner_two_name(msg: Message, state: FSMContext):

    async with state.proxy() as data:
        data["partner_two_name"] = msg.text

    await msg.answer(
        text="–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–µ–º –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ ‚úç"
    )

    await InfoPartner.partner_one_date_of_birth.set()


@dp.message_handler(state=InfoPartner.partner_one_date_of_birth)
async def input_partner_one_data_birth(msg: Message, state: FSMContext):

    """
        üí° variable data["partner_one_fate"]: —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–∏—Å–ª–æ —Å—É–¥—å–±—ã (1) –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    """

    async with state.proxy() as data:
        data["partner_one_fate"] = msg.text

        if data["partner_one_fate"]:
            if "." in data["partner_one_fate"][:3] and "." in data["partner_one_fate"][-5:]:
                if data["partner_one_fate"].replace(".", "").isdigit():
                    data["partner_one_fate"] = verification_of_date_of_birth(data["partner_one_fate"])
            else:
                await msg.answer(
                    text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ \".\" ! "
                         f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –ø—Ä–∏–º–µ—Ä—É {choice(['ü§î', 'üòî'])}"
                )

    await msg.answer(
        text="–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–∞ / –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòâ"
    )

    await InfoPartner.partner_two_date_of_birth.set()


@dp.message_handler(state=InfoPartner.partner_two_date_of_birth)
async def input_partner_two_data_birth(msg: Message, state: FSMContext):

    """
        üí° variable data["partner_two_fate"]: —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–∏—Å–ª–æ —Å—É–¥—å–±—ã (2) –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    """

    async with state.proxy() as data:
        data["partner_two_data_birth"] = msg.text

        if data["partner_two_data_birth"]:
            if "." in data["partner_two_data_birth"][:3] and "." in data["partner_two_data_birth"][-5:]:
                if data["partner_two_data_birth"].replace(".", "").isdigit():
                    data["partner_two_fate"] = verification_of_date_of_birth(data["partner_two_data_birth"])

                    await state.finish()
            else:
                await msg.answer(
                    text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ \".\" ! "
                         f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –ø—Ä–∏–º–µ—Ä—É {choice(['ü§î', 'üòî'])}"
                )

    prompt_ai = (
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ {data['partner_one_name']} –∏ {data['partner_two_name']}, "
        f"C –ß–∏—Å–ª–∞–º–∏ —Å—É–¥—å–±—ã {data['partner_one_fate']} –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, {data['partner_two_fate']} –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞,"
        f"–û–ø–∏—à–∏—Ç–µ –∏—Ö —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–æ, –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞. "
        f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ"
        f"–£—á—Ç–∏ –µ—Å–ª–∏ –±—É–¥—É—Ç –º—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞, —Ç–æ –Ω–∞–ø–∏—à–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥—Ä—É–∂–±—ã, –∞ –µ—Å–ª–∏ –º—É–∂—Å–∫–æ–π –∏ –∂–µ–Ω—Å–∫–∏–π —Ç–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤."
    )

    edit_bot_msg = await msg.answer(
        text=f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n\n‚ú® <b>–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è</b>! ‚è≥\n"
             f"@{msg.from_user.username}, –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã! üî¢üéâ",
        parse_mode="HTML"
    )

    await asyncio.sleep(2)
    await edit_bot_msg.edit_text(
        text="<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</i> ‚Äî <i>–∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</i>... üì°\n",
        parse_mode="HTML"
    )

    send_ai = request_to_ai(prompt_ai)

    await asyncio.sleep(1.8)
    await edit_bot_msg.edit_text(
        text="<i>–°–µ—Ä–¥—Ü–∞ —Å–±–ª–∏–∂–∞—é—Ç—Å—è, —á–∏—Å–ª–∞ —Å—Ö–æ–¥—è—Ç—Å—è ‚Äî —Å–∫–æ—Ä–æ –º—ã –æ—Ç–∫—Ä–æ–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤–∞—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</i>! ‚ù§Ô∏èüîÆ",
        parse_mode="HTML"
    )

    await asyncio.sleep(1)
    await edit_bot_msg.edit_text(
        text="‚ú® <b>1...</b>",
        parse_mode="HTML"
    )

    await asyncio.sleep(1)
    await edit_bot_msg.edit_text(
        text="‚ú® <b>2...</b>",
        parse_mode="HTML"
    )

    await asyncio.sleep(1)
    await edit_bot_msg.edit_text(
        text="‚ú® <b>3...</b>",
        parse_mode="HTML"
    )

    await asyncio.sleep(1)
    await edit_bot_msg.edit_text(
        text="üí´ <i>–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ</i>! üöÄ",
        parse_mode="HTML"
    )

    await edit_bot_msg.delete()

    await msg.answer(
        send_ai,
        parse_mode="HTML",
        reply_markup=start_commands_buttons
    )
